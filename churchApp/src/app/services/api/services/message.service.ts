/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Message } from '../models/message';
import { messagesDelete } from '../fn/message/messages-delete';
import { MessagesDelete$Params } from '../fn/message/messages-delete';
import { messagesFilterGet } from '../fn/message/messages-filter-get';
import { MessagesFilterGet$Params } from '../fn/message/messages-filter-get';
import { messagesGet } from '../fn/message/messages-get';
import { MessagesGet$Params } from '../fn/message/messages-get';
import { messagesPost } from '../fn/message/messages-post';
import { MessagesPost$Params } from '../fn/message/messages-post';
import { messagesPut } from '../fn/message/messages-put';
import { MessagesPut$Params } from '../fn/message/messages-put';
import { messagesTitleGet } from '../fn/message/messages-title-get';
import { MessagesTitleGet$Params } from '../fn/message/messages-title-get';

@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `messagesGet()` */
  static readonly MessagesGetPath = '/messages';

  /**
   * Get a list of all messages.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `messagesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  messagesGet$Response(params?: MessagesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'messageListMapped'?: Array<Message>;
}>> {
    return messagesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a list of all messages.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `messagesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  messagesGet(params?: MessagesGet$Params, context?: HttpContext): Observable<{
'messageListMapped'?: Array<Message>;
}> {
    return this.messagesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'messageListMapped'?: Array<Message>;
}>): {
'messageListMapped'?: Array<Message>;
} => r.body)
    );
  }

  /** Path part for operation `messagesPut()` */
  static readonly MessagesPutPath = '/messages';

  /**
   * Update a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `messagesPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  messagesPut$Response(params: MessagesPut$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'status'?: string;
}>> {
    return messagesPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `messagesPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  messagesPut(params: MessagesPut$Params, context?: HttpContext): Observable<{
'status'?: string;
}> {
    return this.messagesPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'status'?: string;
}>): {
'status'?: string;
} => r.body)
    );
  }

  /** Path part for operation `messagesPost()` */
  static readonly MessagesPostPath = '/messages';

  /**
   * Insert a new message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `messagesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  messagesPost$Response(params: MessagesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'status'?: string;
}>> {
    return messagesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Insert a new message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `messagesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  messagesPost(params: MessagesPost$Params, context?: HttpContext): Observable<{
'status'?: string;
}> {
    return this.messagesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'status'?: string;
}>): {
'status'?: string;
} => r.body)
    );
  }

  /** Path part for operation `messagesDelete()` */
  static readonly MessagesDeletePath = '/messages';

  /**
   * Delete a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `messagesDelete()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  messagesDelete$Response(params: MessagesDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'status'?: string;
}>> {
    return messagesDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `messagesDelete$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  messagesDelete(params: MessagesDelete$Params, context?: HttpContext): Observable<{
'status'?: string;
}> {
    return this.messagesDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'status'?: string;
}>): {
'status'?: string;
} => r.body)
    );
  }

  /** Path part for operation `messagesTitleGet()` */
  static readonly MessagesTitleGetPath = '/messages/title';

  /**
   * Filter messages by title.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `messagesTitleGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  messagesTitleGet$Response(params: MessagesTitleGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return messagesTitleGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Filter messages by title.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `messagesTitleGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  messagesTitleGet(params: MessagesTitleGet$Params, context?: HttpContext): Observable<any> {
    return this.messagesTitleGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `messagesFilterGet()` */
  static readonly MessagesFilterGetPath = '/messages/filter';

  /**
   * Filter messages by coincidence on any field.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `messagesFilterGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  messagesFilterGet$Response(params?: MessagesFilterGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return messagesFilterGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Filter messages by coincidence on any field.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `messagesFilterGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  messagesFilterGet(params?: MessagesFilterGet$Params, context?: HttpContext): Observable<any> {
    return this.messagesFilterGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
