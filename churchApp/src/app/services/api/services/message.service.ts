/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addMessage } from '../fn/message/add-message';
import { AddMessage$Params } from '../fn/message/add-message';
import { deleteMessage } from '../fn/message/delete-message';
import { DeleteMessage$Params } from '../fn/message/delete-message';
import { findByFilter } from '../fn/message/find-by-filter';
import { FindByFilter$Params } from '../fn/message/find-by-filter';
import { findByTitle } from '../fn/message/find-by-title';
import { FindByTitle$Params } from '../fn/message/find-by-title';
import { getAllMessages } from '../fn/message/get-all-messages';
import { GetAllMessages$Params } from '../fn/message/get-all-messages';
import { Message } from '../models/message';
import { updateMessage } from '../fn/message/update-message';
import { UpdateMessage$Params } from '../fn/message/update-message';

@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllMessages()` */
  static readonly GetAllMessagesPath = '/messages';

  /**
   * Get a list of all messages.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessages$Response(params?: GetAllMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'messageListMapped'?: Array<Message>;
}>> {
    return getAllMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a list of all messages.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessages(params?: GetAllMessages$Params, context?: HttpContext): Observable<{
'messageListMapped'?: Array<Message>;
}> {
    return this.getAllMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'messageListMapped'?: Array<Message>;
}>): {
'messageListMapped'?: Array<Message>;
} => r.body)
    );
  }

  /** Path part for operation `updateMessage()` */
  static readonly UpdateMessagePath = '/messages';

  /**
   * Update a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMessage$Response(params: UpdateMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'status'?: string;
}>> {
    return updateMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMessage(params: UpdateMessage$Params, context?: HttpContext): Observable<{
'status'?: string;
}> {
    return this.updateMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'status'?: string;
}>): {
'status'?: string;
} => r.body)
    );
  }

  /** Path part for operation `addMessage()` */
  static readonly AddMessagePath = '/messages';

  /**
   * Insert a new message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMessage$Response(params: AddMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'status'?: string;
}>> {
    return addMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Insert a new message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addMessage(params: AddMessage$Params, context?: HttpContext): Observable<{
'status'?: string;
}> {
    return this.addMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'status'?: string;
}>): {
'status'?: string;
} => r.body)
    );
  }

  /** Path part for operation `deleteMessage()` */
  static readonly DeleteMessagePath = '/messages';

  /**
   * Delete a message.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteMessage$Response(params: DeleteMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'status'?: string;
}>> {
    return deleteMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a message.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteMessage(params: DeleteMessage$Params, context?: HttpContext): Observable<{
'status'?: string;
}> {
    return this.deleteMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'status'?: string;
}>): {
'status'?: string;
} => r.body)
    );
  }

  /** Path part for operation `findByTitle()` */
  static readonly FindByTitlePath = '/messages/title';

  /**
   * Filter messages by title.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByTitle()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByTitle$Response(params: FindByTitle$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return findByTitle(this.http, this.rootUrl, params, context);
  }

  /**
   * Filter messages by title.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByTitle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByTitle(params: FindByTitle$Params, context?: HttpContext): Observable<any> {
    return this.findByTitle$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `findByFilter()` */
  static readonly FindByFilterPath = '/messages/filter';

  /**
   * Filter messages by coincidence on any field.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByFilter()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByFilter$Response(params?: FindByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return findByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * Filter messages by coincidence on any field.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByFilter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByFilter(params?: FindByFilter$Params, context?: HttpContext): Observable<any> {
    return this.findByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
